digraph {
    "Lexeme(id=352, desc='')" -> "Lexeme(id=0, desc='')";
    "Lexeme(id=0, desc='')" -> "Lexeme(id=3, desc='file')";
    "Lexeme(id=3, desc='file')" -> "Lexeme(id=287, desc='(topLevelObject)+')";
    "Lexeme(id=287, desc='(topLevelObject)+')" -> "Lexeme(id=6, desc='topLevelObject')";
    "Lexeme(id=6, desc='topLevelObject')" -> "Lexeme(id=7, desc='declaration')";
    "Lexeme(id=6, desc='topLevelObject')" -> "Lexeme(id=92, desc='semis')";
    "Lexeme(id=7, desc='declaration')" -> "Lexeme(id=14, desc='propertyDeclaration')";
    "Lexeme(id=14, desc='propertyDeclaration')" -> "Lexeme(id=169, desc='declarationKeyword')";
    "Lexeme(id=14, desc='propertyDeclaration')" -> "Lexeme(id=8, desc='genericVariableDeclaration')";
    "Lexeme(id=14, desc='propertyDeclaration')" -> "Lexeme(id=83, desc='propertyInit')";
    "Lexeme(id=169, desc='declarationKeyword')" -> "ExactLexeme(content='val', id='224')";
    "ExactLexeme(content='val', id='224')" -> "Token(content='val', position=(1:1), tags=[identBasic, regex]) (0)";
    "Lexeme(id=8, desc='genericVariableDeclaration')" -> "Lexeme(id=9, desc='variableDeclaration')";
    "Lexeme(id=9, desc='variableDeclaration')" -> "Lexeme(id=284, desc='identifier')";
    "Lexeme(id=284, desc='identifier')" -> "RegexLexeme(regex='[A-Za-z_][A-Za-z_0-9]*', id='159', name='identBasic')";
    "RegexLexeme(regex='[A-Za-z_][A-Za-z_0-9]*', id='159', name='identBasic')" -> "Token(content='a', position=(1:5), tags=[identBasic, regex]) (2)";
    "Lexeme(id=83, desc='propertyInit')" -> "ExactLexeme(content='=', id='272')";
    "Lexeme(id=83, desc='propertyInit')" -> "Lexeme(id=94, desc='expression')";
    "ExactLexeme(content='=', id='272')" -> "Token(content='=', position=(1:7), tags=[]) (4)";
    "Lexeme(id=94, desc='expression')" -> "Lexeme(id=95, desc='disjunction')";
    "Lexeme(id=95, desc='disjunction')" -> "Lexeme(id=96, desc='conjunction')";
    "Lexeme(id=96, desc='conjunction')" -> "Lexeme(id=97, desc='equality')";
    "Lexeme(id=97, desc='equality')" -> "Lexeme(id=98, desc='comparison')";
    "Lexeme(id=98, desc='comparison')" -> "Lexeme(id=99, desc='genericCallLikeComparison')";
    "Lexeme(id=99, desc='genericCallLikeComparison')" -> "Lexeme(id=100, desc='infixOperation')";
    "Lexeme(id=100, desc='infixOperation')" -> "Lexeme(id=101, desc='elvisExpression')";
    "Lexeme(id=101, desc='elvisExpression')" -> "Lexeme(id=102, desc='infixFunctionCall')";
    "Lexeme(id=102, desc='infixFunctionCall')" -> "Lexeme(id=103, desc='rangeExpression')";
    "Lexeme(id=103, desc='rangeExpression')" -> "Lexeme(id=104, desc='additiveExpression')";
    "Lexeme(id=104, desc='additiveExpression')" -> "Lexeme(id=105, desc='multiplicativeExpression')";
    "Lexeme(id=105, desc='multiplicativeExpression')" -> "Lexeme(id=106, desc='asExpression')";
    "Lexeme(id=106, desc='asExpression')" -> "Lexeme(id=107, desc='prefixUnaryExpression')";
    "Lexeme(id=107, desc='prefixUnaryExpression')" -> "Lexeme(id=108, desc='postfixUnaryExpression')";
    "Lexeme(id=108, desc='postfixUnaryExpression')" -> "Lexeme(id=109, desc='primaryExpression')";
    "Lexeme(id=109, desc='primaryExpression')" -> "Lexeme(id=170, desc='string')";
    "Lexeme(id=170, desc='string')" -> "Token(content='$', position=(1:9), tags=[string]) (6)";
    "Lexeme(id=92, desc='semis')" -> "Lexeme(id=351, desc='(semiInternal)+')";
    "Lexeme(id=351, desc='(semiInternal)+')" -> "Lexeme(id=93, desc='semiInternal')";
    "Lexeme(id=93, desc='semiInternal')" -> "Lexeme(id=2, desc='EOF')";
    "Lexeme(id=2, desc='EOF')" -> "Token(content='EOF', position=(1:16), tags=[EOF]) (7)";
}