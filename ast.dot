digraph {
    "Lexeme(id=19, desc='')" -> "Lexeme(id=0, desc='')";
    "Lexeme(id=0, desc='')" -> "Lexeme(id=16, desc='code') (1)";
    "Lexeme(id=16, desc='code') (1)" -> "Lexeme(id=15, desc='line') (1)";
    "Lexeme(id=16, desc='code') (1)" -> "ExactLexeme(content='\n', id='14')";
    "Lexeme(id=16, desc='code') (1)" -> "Lexeme(id=16, desc='code') (2)";
    "Lexeme(id=15, desc='line') (1)" -> "Lexeme(id=1, desc='exp') (1)";
    "Lexeme(id=15, desc='line') (1)" -> "ExactLexeme(content='=', id='9')";
    "Lexeme(id=15, desc='line') (1)" -> "Lexeme(id=1, desc='exp') (2)";
    "Lexeme(id=1, desc='exp') (1)" -> "RegexLexeme(regex='_*[A-Za-z][A-Za-z_0-9]*', id='10') (1)";
    "RegexLexeme(regex='_*[A-Za-z][A-Za-z_0-9]*', id='10') (1)" -> "Token(content='return', position=(1:1), tags=[word, regex]) (0)";
    "ExactLexeme(content='=', id='9')" -> "Token(content='=', position=(1:7), tags=[]) (1)";
    "Lexeme(id=1, desc='exp') (2)" -> "Lexeme(id=1, desc='exp') (3)";
    "Lexeme(id=1, desc='exp') (2)" -> "Lexeme(id=3, desc='action') (1)";
    "Lexeme(id=1, desc='exp') (2)" -> "Lexeme(id=1, desc='exp') (4)";
    "Lexeme(id=1, desc='exp') (3)" -> "RegexLexeme(regex='\d+', id='2') (1)";
    "RegexLexeme(regex='\d+', id='2') (1)" -> "Token(content='2', position=(1:8), tags=[number, regex]) (2)";
    "Lexeme(id=3, desc='action') (1)" -> "ExactLexeme(content='*', id='6')";
    "ExactLexeme(content='*', id='6')" -> "Token(content='*', position=(1:9), tags=[]) (3)";
    "Lexeme(id=1, desc='exp') (4)" -> "ExactLexeme(content='(', id='7')";
    "Lexeme(id=1, desc='exp') (4)" -> "Lexeme(id=1, desc='exp') (5)";
    "Lexeme(id=1, desc='exp') (4)" -> "ExactLexeme(content=')', id='8')";
    "ExactLexeme(content='(', id='7')" -> "Token(content='(', position=(1:10), tags=[]) (4)";
    "Lexeme(id=1, desc='exp') (5)" -> "Lexeme(id=1, desc='exp') (6)";
    "Lexeme(id=1, desc='exp') (5)" -> "Lexeme(id=3, desc='action') (2)";
    "Lexeme(id=1, desc='exp') (5)" -> "Lexeme(id=1, desc='exp') (7)";
    "Lexeme(id=1, desc='exp') (6)" -> "RegexLexeme(regex='\d+', id='2') (2)";
    "RegexLexeme(regex='\d+', id='2') (2)" -> "Token(content='11', position=(1:11), tags=[number, regex]) (5)";
    "Lexeme(id=3, desc='action') (2)" -> "ExactLexeme(content='+', id='4')";
    "ExactLexeme(content='+', id='4')" -> "Token(content='+', position=(1:13), tags=[]) (6)";
    "Lexeme(id=1, desc='exp') (7)" -> "RegexLexeme(regex='\d+', id='2') (3)";
    "RegexLexeme(regex='\d+', id='2') (3)" -> "Token(content='3', position=(1:14), tags=[number, regex]) (7)";
    "ExactLexeme(content=')', id='8')" -> "Token(content=')', position=(1:15), tags=[]) (8)";
    "ExactLexeme(content='\n', id='14')" -> "Token(content='\n', position=(1:16), tags=[]) (9)";
    "Lexeme(id=16, desc='code') (2)" -> "Lexeme(id=15, desc='line') (2)";
    "Lexeme(id=15, desc='line') (2)" -> "ExactLexeme(content='return', id='11')";
    "Lexeme(id=15, desc='line') (2)" -> "ExactLexeme(content=' ', id='13')";
    "Lexeme(id=15, desc='line') (2)" -> "Lexeme(id=1, desc='exp') (8)";
    "ExactLexeme(content='return', id='11')" -> "Token(content='return', position=(2:1), tags=[word, regex]) (10)";
    "ExactLexeme(content=' ', id='13')" -> "Token(content=' ', position=(2:7), tags=[]) (11)";
    "Lexeme(id=1, desc='exp') (8)" -> "RegexLexeme(regex='_*[A-Za-z][A-Za-z_0-9]*', id='10') (2)";
    "RegexLexeme(regex='_*[A-Za-z][A-Za-z_0-9]*', id='10') (2)" -> "Token(content='return', position=(2:8), tags=[word, regex]) (12)";
}